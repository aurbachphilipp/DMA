-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dma_demo_v_tpg_0_2_MultiPixStream2AXIvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ovrlayYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
    ovrlayYUV_empty_n : IN STD_LOGIC;
    ovrlayYUV_read : OUT STD_LOGIC;
    height : IN STD_LOGIC_VECTOR (15 downto 0);
    width : IN STD_LOGIC_VECTOR (15 downto 0);
    colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
    fid_in : IN STD_LOGIC_VECTOR (0 downto 0);
    fid : OUT STD_LOGIC_VECTOR (0 downto 0);
    fid_ap_vld : OUT STD_LOGIC;
    field_id : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dma_demo_v_tpg_0_2_MultiPixStream2AXIvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv16_4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000011";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal counter : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ovrlayYUV_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal j_reg_209 : STD_LOGIC_VECTOR (8 downto 0);
    signal sof_3_reg_220 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln912_fu_232_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal field_id_read_read_fu_142_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal cmp18187_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1005_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_276_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_482 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal regslice_both_AXI_video_strm_V_data_V_U_apdone_blk : STD_LOGIC;
    signal icmp_ln957_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_290_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln962_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln962_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_505 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal i_reg_198 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_phi_mux_sof_3_phi_fu_224_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln990_fu_313_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sof_fu_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal counter_loc_0_fu_120 : STD_LOGIC_VECTOR (15 downto 0);
    signal fid_preg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal fid_toggle_1_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal fid_toggle_fu_333_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln913_fu_240_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln962_fu_296_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln145_fu_338_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln145_3_fu_342_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_s_fu_370_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_4_fu_362_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln145_4_fu_352_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1005_2_fu_392_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1005_1_fu_385_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln1005_fu_378_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_fu_399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal m_axis_video_TDATA_int_regslice : STD_LOGIC_VECTOR (23 downto 0);
    signal m_axis_video_TVALID_int_regslice : STD_LOGIC;
    signal m_axis_video_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_AXI_video_strm_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dma_demo_v_tpg_0_2_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_AXI_video_strm_V_data_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 24)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => m_axis_video_TDATA_int_regslice,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => m_axis_video_TREADY_int_regslice,
        data_out => m_axis_video_TDATA,
        vld_out => regslice_both_AXI_video_strm_V_data_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_data_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_keep_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv3_7,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_AXI_video_strm_V_keep_V_U_ack_in_dummy,
        data_out => m_axis_video_TKEEP,
        vld_out => regslice_both_AXI_video_strm_V_keep_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_keep_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_strb_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 3)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv3_0,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_AXI_video_strm_V_strb_V_U_ack_in_dummy,
        data_out => m_axis_video_TSTRB,
        vld_out => regslice_both_AXI_video_strm_V_strb_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_strb_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_user_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => sof_3_reg_220,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_AXI_video_strm_V_user_V_U_ack_in_dummy,
        data_out => m_axis_video_TUSER,
        vld_out => regslice_both_AXI_video_strm_V_user_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_user_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_last_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => axi_last_V_reg_505,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_AXI_video_strm_V_last_V_U_ack_in_dummy,
        data_out => m_axis_video_TLAST,
        vld_out => regslice_both_AXI_video_strm_V_last_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_last_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_id_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_AXI_video_strm_V_id_V_U_ack_in_dummy,
        data_out => m_axis_video_TID,
        vld_out => regslice_both_AXI_video_strm_V_id_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_id_V_U_apdone_blk);

    regslice_both_AXI_video_strm_V_dest_V_U : component dma_demo_v_tpg_0_2_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => m_axis_video_TVALID_int_regslice,
        ack_in => regslice_both_AXI_video_strm_V_dest_V_U_ack_in_dummy,
        data_out => m_axis_video_TDEST,
        vld_out => regslice_both_AXI_video_strm_V_dest_V_U_vld_out,
        ack_out => m_axis_video_TREADY,
        apdone_blk => regslice_both_AXI_video_strm_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_1) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((cmp18187_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_0) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((cmp18187_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_0) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    fid_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fid_preg <= ap_const_lv1_0;
            else
                if (((field_id_read_read_fu_142_p2 = ap_const_lv16_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    fid_preg <= fid_toggle_fu_333_p1;
                elsif (((field_id_read_read_fu_142_p2 = ap_const_lv16_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    fid_preg <= fid_toggle_1_fu_420_p2;
                elsif (((not((field_id_read_read_fu_142_p2 = ap_const_lv16_3)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_1)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_0)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_2)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_4)) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
                    fid_preg <= ap_const_lv1_0;
                elsif (((field_id_read_read_fu_142_p2 = ap_const_lv16_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    fid_preg <= ap_const_lv1_1;
                elsif (((field_id_read_read_fu_142_p2 = ap_const_lv16_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    fid_preg <= fid_in;
                end if; 
            end if;
        end if;
    end process;


    counter_loc_0_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                counter_loc_0_fu_120 <= counter;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_sof_3_phi_fu_224_p4 = ap_const_lv1_1) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                counter_loc_0_fu_120 <= add_ln990_fu_313_p2;
            end if; 
        end if;
    end process;

    i_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_198 <= i_1_reg_482;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_198 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp18187_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_0) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                j_reg_209 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                j_reg_209 <= j_1_fu_290_p2;
            end if; 
        end if;
    end process;

    sof_3_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((cmp18187_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_0) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
                sof_3_reg_220 <= sof_fu_116;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_reg_501 = ap_const_lv1_0))) then 
                sof_3_reg_220 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    sof_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                sof_fu_116 <= ap_const_lv1_1;
            elsif (((cmp18187_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                sof_fu_116 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0))) then
                axi_last_V_reg_505 <= axi_last_V_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_phi_mux_sof_3_phi_fu_224_p4 = ap_const_lv1_1) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                counter <= add_ln990_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                i_1_reg_482 <= i_1_fu_276_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln962_reg_501 <= icmp_ln962_fu_300_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, cmp18187_fu_250_p2, ap_CS_fsm_state2, regslice_both_AXI_video_strm_V_data_V_U_apdone_blk, icmp_ln957_fu_285_p2, ap_enable_reg_pp0_iter0, icmp_ln962_fu_300_p2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_1) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((cmp18187_fu_250_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_0) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((cmp18187_fu_250_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_0) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln990_fu_313_p2 <= std_logic_vector(unsigned(counter_loc_0_fu_120) + unsigned(ap_const_lv16_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ovrlayYUV_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axis_video_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axis_video_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((m_axis_video_TREADY_int_regslice = ap_const_logic_0) or (ovrlayYUV_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ovrlayYUV_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axis_video_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axis_video_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((m_axis_video_TREADY_int_regslice = ap_const_logic_0) or (ovrlayYUV_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ovrlayYUV_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, m_axis_video_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (m_axis_video_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((m_axis_video_TREADY_int_regslice = ap_const_logic_0) or (ovrlayYUV_empty_n = ap_const_logic_0))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(ovrlayYUV_empty_n, m_axis_video_TREADY_int_regslice)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((m_axis_video_TREADY_int_regslice = ap_const_logic_0) or (ovrlayYUV_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter2_assign_proc : process(m_axis_video_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage0_iter2 <= (m_axis_video_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln962_fu_300_p2)
    begin
        if ((icmp_ln962_fu_300_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, regslice_both_AXI_video_strm_V_data_V_U_apdone_blk, icmp_ln957_fu_285_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_1) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_sof_3_phi_fu_224_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, sof_3_reg_220, icmp_ln962_reg_501)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_reg_501 = ap_const_lv1_0))) then 
            ap_phi_mux_sof_3_phi_fu_224_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_sof_3_phi_fu_224_p4 <= sof_3_reg_220;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, regslice_both_AXI_video_strm_V_data_V_U_apdone_blk, icmp_ln957_fu_285_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln957_fu_285_p2 = ap_const_lv1_1) and (regslice_both_AXI_video_strm_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axi_last_V_fu_305_p2 <= "1" when (zext_ln962_fu_296_p1 = sub_fu_244_p2) else "0";
    cmp18187_fu_250_p2 <= "1" when (empty_fu_236_p1 = ap_const_lv9_0) else "0";
    empty_fu_236_p1 <= width(9 - 1 downto 0);

    fid_assign_proc : process(fid_in, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, field_id_read_read_fu_142_p2, ap_enable_reg_pp0_iter0, icmp_ln962_fu_300_p2, fid_preg, ap_block_pp0_stage0_01001, fid_toggle_1_fu_420_p2, fid_toggle_fu_333_p1)
    begin
        if (((field_id_read_read_fu_142_p2 = ap_const_lv16_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fid <= fid_toggle_fu_333_p1;
        elsif (((field_id_read_read_fu_142_p2 = ap_const_lv16_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fid <= fid_toggle_1_fu_420_p2;
        elsif (((not((field_id_read_read_fu_142_p2 = ap_const_lv16_3)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_1)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_0)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_2)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_4)) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            fid <= ap_const_lv1_0;
        elsif (((field_id_read_read_fu_142_p2 = ap_const_lv16_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            fid <= ap_const_lv1_1;
        elsif (((field_id_read_read_fu_142_p2 = ap_const_lv16_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            fid <= fid_in;
        else 
            fid <= fid_preg;
        end if; 
    end process;


    fid_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, field_id_read_read_fu_142_p2, ap_enable_reg_pp0_iter0, icmp_ln962_fu_300_p2)
    begin
        if (((not((field_id_read_read_fu_142_p2 = ap_const_lv16_3)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_1)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_0)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_2)) and not((field_id_read_read_fu_142_p2 = ap_const_lv16_4)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((field_id_read_read_fu_142_p2 = ap_const_lv16_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln962_fu_300_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            fid_ap_vld <= ap_const_logic_1;
        else 
            fid_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    fid_toggle_1_fu_420_p2 <= (fid_toggle_fu_333_p1 xor ap_const_lv1_1);
    fid_toggle_fu_333_p1 <= counter_loc_0_fu_120(1 - 1 downto 0);
    field_id_read_read_fu_142_p2 <= field_id;
    i_1_fu_276_p2 <= std_logic_vector(unsigned(i_reg_198) + unsigned(ap_const_lv9_1));
    icmp_ln1005_fu_260_p2 <= "1" when (colorFormat = ap_const_lv8_0) else "0";
    icmp_ln957_fu_285_p2 <= "1" when (i_reg_198 = trunc_ln912_fu_232_p1) else "0";
    icmp_ln962_fu_300_p2 <= "1" when (j_reg_209 = empty_fu_236_p1) else "0";
    j_1_fu_290_p2 <= std_logic_vector(unsigned(j_reg_209) + unsigned(ap_const_lv9_1));

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, m_axis_video_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY_int_regslice;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDATA_int_regslice <= (tmp_fu_399_p3 & select_ln1005_fu_378_p3(7 downto 0));
    m_axis_video_TVALID <= regslice_both_AXI_video_strm_V_data_V_U_vld_out;

    m_axis_video_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axis_video_TVALID_int_regslice <= ap_const_logic_1;
        else 
            m_axis_video_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    ovrlayYUV_blk_n_assign_proc : process(ovrlayYUV_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ovrlayYUV_blk_n <= ovrlayYUV_empty_n;
        else 
            ovrlayYUV_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ovrlayYUV_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ovrlayYUV_read <= ap_const_logic_1;
        else 
            ovrlayYUV_read <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_362_p3 <= (ap_const_lv16_FFFF & trunc_ln145_fu_338_p1);
    p_Result_s_fu_370_p3 <= (ap_const_lv16_FFFF & trunc_ln145_3_fu_342_p4);
    select_ln1005_1_fu_385_p3 <= 
        trunc_ln145_4_fu_352_p4 when (icmp_ln1005_fu_260_p2(0) = '1') else 
        trunc_ln145_3_fu_342_p4;
    select_ln1005_2_fu_392_p3 <= 
        trunc_ln145_fu_338_p1 when (icmp_ln1005_fu_260_p2(0) = '1') else 
        trunc_ln145_4_fu_352_p4;
    select_ln1005_fu_378_p3 <= 
        p_Result_s_fu_370_p3 when (icmp_ln1005_fu_260_p2(0) = '1') else 
        p_Result_4_fu_362_p3;
    sub_fu_244_p2 <= std_logic_vector(unsigned(zext_ln913_fu_240_p1) + unsigned(ap_const_lv10_3FF));
    tmp_fu_399_p3 <= (select_ln1005_2_fu_392_p3 & select_ln1005_1_fu_385_p3);
    trunc_ln145_3_fu_342_p4 <= ovrlayYUV_dout(15 downto 8);
    trunc_ln145_4_fu_352_p4 <= ovrlayYUV_dout(23 downto 16);
    trunc_ln145_fu_338_p1 <= ovrlayYUV_dout(8 - 1 downto 0);
    trunc_ln912_fu_232_p1 <= height(9 - 1 downto 0);
    zext_ln913_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_236_p1),10));
    zext_ln962_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_209),10));
end behav;
