-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dma_demo_v_tpg_0_2_v_tpg is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CTRL_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_WVALID : IN STD_LOGIC;
    s_axi_CTRL_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_RREADY : IN STD_LOGIC;
    s_axi_CTRL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    fid_in : IN STD_LOGIC;
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    fid : OUT STD_LOGIC;
    fid_ap_vld : OUT STD_LOGIC;
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC );
end;


architecture behav of dma_demo_v_tpg_0_2_v_tpg is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "dma_demo_v_tpg_0_2_v_tpg,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-1,HLS_INPUT_CLOCK=6.734000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.648600,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=6170,HLS_SYN_LUT=7050,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal ap_rst_n_inv : STD_LOGIC;
    signal height : STD_LOGIC_VECTOR (15 downto 0);
    signal width : STD_LOGIC_VECTOR (15 downto 0);
    signal bckgndId : STD_LOGIC_VECTOR (7 downto 0);
    signal ovrlayId : STD_LOGIC_VECTOR (7 downto 0);
    signal maskId : STD_LOGIC_VECTOR (7 downto 0);
    signal motionSpeed : STD_LOGIC_VECTOR (7 downto 0);
    signal colorFormat : STD_LOGIC_VECTOR (7 downto 0);
    signal crossHairX : STD_LOGIC_VECTOR (15 downto 0);
    signal crossHairY : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateHorContStart : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateHorContDelta : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateVerContStart : STD_LOGIC_VECTOR (15 downto 0);
    signal ZplateVerContDelta : STD_LOGIC_VECTOR (15 downto 0);
    signal boxSize : STD_LOGIC_VECTOR (15 downto 0);
    signal boxColorR : STD_LOGIC_VECTOR (15 downto 0);
    signal boxColorG : STD_LOGIC_VECTOR (15 downto 0);
    signal boxColorB : STD_LOGIC_VECTOR (15 downto 0);
    signal dpDynamicRange : STD_LOGIC_VECTOR (7 downto 0);
    signal dpYUVCoef : STD_LOGIC_VECTOR (7 downto 0);
    signal field_id : STD_LOGIC_VECTOR (15 downto 0);
    signal bck_motion_en : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal tpgBackground_U0_ap_start : STD_LOGIC;
    signal tpgBackground_U0_ap_done : STD_LOGIC;
    signal tpgBackground_U0_ap_continue : STD_LOGIC;
    signal tpgBackground_U0_ap_idle : STD_LOGIC;
    signal tpgBackground_U0_ap_ready : STD_LOGIC;
    signal tpgBackground_U0_start_out : STD_LOGIC;
    signal tpgBackground_U0_start_write : STD_LOGIC;
    signal tpgBackground_U0_outImg_din : STD_LOGIC_VECTOR (23 downto 0);
    signal tpgBackground_U0_outImg_write : STD_LOGIC;
    signal tpgForeground_U0_ap_start : STD_LOGIC;
    signal tpgForeground_U0_ap_done : STD_LOGIC;
    signal tpgForeground_U0_ap_continue : STD_LOGIC;
    signal tpgForeground_U0_ap_idle : STD_LOGIC;
    signal tpgForeground_U0_ap_ready : STD_LOGIC;
    signal tpgForeground_U0_start_out : STD_LOGIC;
    signal tpgForeground_U0_start_write : STD_LOGIC;
    signal tpgForeground_U0_srcImg_read : STD_LOGIC;
    signal tpgForeground_U0_outImg_din : STD_LOGIC_VECTOR (23 downto 0);
    signal tpgForeground_U0_outImg_write : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_start : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_done : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_continue : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_idle : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ap_ready : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_ovrlayYUV_read : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_fid_in : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_fid : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_fid_ap_vld : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDATA : STD_LOGIC_VECTOR (23 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TVALID : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB : STD_LOGIC_VECTOR (2 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal MultiPixStream2AXIvideo_U0_m_axis_video_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal bckgndYUV_full_n : STD_LOGIC;
    signal bckgndYUV_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal bckgndYUV_empty_n : STD_LOGIC;
    signal ovrlayYUV_full_n : STD_LOGIC;
    signal ovrlayYUV_dout : STD_LOGIC_VECTOR (23 downto 0);
    signal ovrlayYUV_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_tpgForeground_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tpgForeground_U0_full_n : STD_LOGIC;
    signal start_for_tpgForeground_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tpgForeground_U0_empty_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_full_n : STD_LOGIC;
    signal start_for_MultiPixStream2AXIvideo_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_MultiPixStream2AXIvideo_U0_empty_n : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_start_full_n : STD_LOGIC;
    signal MultiPixStream2AXIvideo_U0_start_write : STD_LOGIC;

    component dma_demo_v_tpg_0_2_tpgBackground IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        bck_motion_en : IN STD_LOGIC_VECTOR (15 downto 0);
        patternId : IN STD_LOGIC_VECTOR (7 downto 0);
        ZplateHorContStart : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContDelta : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContStart : IN STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContDelta : IN STD_LOGIC_VECTOR (15 downto 0);
        dpDynamicRange : IN STD_LOGIC_VECTOR (7 downto 0);
        dpYUVCoef : IN STD_LOGIC_VECTOR (7 downto 0);
        motionSpeed : IN STD_LOGIC_VECTOR (7 downto 0);
        colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        outImg_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        outImg_full_n : IN STD_LOGIC;
        outImg_write : OUT STD_LOGIC );
    end component;


    component dma_demo_v_tpg_0_2_tpgForeground IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        srcImg_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        srcImg_empty_n : IN STD_LOGIC;
        srcImg_read : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        patternId : IN STD_LOGIC_VECTOR (7 downto 0);
        maskId : IN STD_LOGIC_VECTOR (7 downto 0);
        colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        crossHairX : IN STD_LOGIC_VECTOR (15 downto 0);
        crossHairY : IN STD_LOGIC_VECTOR (15 downto 0);
        boxSize : IN STD_LOGIC_VECTOR (15 downto 0);
        boxColorR : IN STD_LOGIC_VECTOR (15 downto 0);
        boxColorG : IN STD_LOGIC_VECTOR (15 downto 0);
        boxColorB : IN STD_LOGIC_VECTOR (15 downto 0);
        motionSpeed : IN STD_LOGIC_VECTOR (7 downto 0);
        outImg_din : OUT STD_LOGIC_VECTOR (23 downto 0);
        outImg_full_n : IN STD_LOGIC;
        outImg_write : OUT STD_LOGIC );
    end component;


    component dma_demo_v_tpg_0_2_MultiPixStream2AXIvideo IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ovrlayYUV_dout : IN STD_LOGIC_VECTOR (23 downto 0);
        ovrlayYUV_empty_n : IN STD_LOGIC;
        ovrlayYUV_read : OUT STD_LOGIC;
        height : IN STD_LOGIC_VECTOR (15 downto 0);
        width : IN STD_LOGIC_VECTOR (15 downto 0);
        colorFormat : IN STD_LOGIC_VECTOR (7 downto 0);
        fid_in : IN STD_LOGIC_VECTOR (0 downto 0);
        fid : OUT STD_LOGIC_VECTOR (0 downto 0);
        fid_ap_vld : OUT STD_LOGIC;
        field_id : IN STD_LOGIC_VECTOR (15 downto 0);
        m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
        m_axis_video_TVALID : OUT STD_LOGIC;
        m_axis_video_TREADY : IN STD_LOGIC;
        m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dma_demo_v_tpg_0_2_fifo_w24_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (23 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (23 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dma_demo_v_tpg_0_2_start_for_tpgForeground_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dma_demo_v_tpg_0_2_start_for_MultiPixStream2AXIvideo_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component dma_demo_v_tpg_0_2_CTRL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        height : OUT STD_LOGIC_VECTOR (15 downto 0);
        width : OUT STD_LOGIC_VECTOR (15 downto 0);
        bckgndId : OUT STD_LOGIC_VECTOR (7 downto 0);
        ovrlayId : OUT STD_LOGIC_VECTOR (7 downto 0);
        maskId : OUT STD_LOGIC_VECTOR (7 downto 0);
        motionSpeed : OUT STD_LOGIC_VECTOR (7 downto 0);
        colorFormat : OUT STD_LOGIC_VECTOR (7 downto 0);
        crossHairX : OUT STD_LOGIC_VECTOR (15 downto 0);
        crossHairY : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContStart : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateHorContDelta : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContStart : OUT STD_LOGIC_VECTOR (15 downto 0);
        ZplateVerContDelta : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxSize : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxColorR : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxColorG : OUT STD_LOGIC_VECTOR (15 downto 0);
        boxColorB : OUT STD_LOGIC_VECTOR (15 downto 0);
        dpDynamicRange : OUT STD_LOGIC_VECTOR (7 downto 0);
        dpYUVCoef : OUT STD_LOGIC_VECTOR (7 downto 0);
        field_id : OUT STD_LOGIC_VECTOR (15 downto 0);
        bck_motion_en : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    CTRL_s_axi_U : component dma_demo_v_tpg_0_2_CTRL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_AWVALID,
        AWREADY => s_axi_CTRL_AWREADY,
        AWADDR => s_axi_CTRL_AWADDR,
        WVALID => s_axi_CTRL_WVALID,
        WREADY => s_axi_CTRL_WREADY,
        WDATA => s_axi_CTRL_WDATA,
        WSTRB => s_axi_CTRL_WSTRB,
        ARVALID => s_axi_CTRL_ARVALID,
        ARREADY => s_axi_CTRL_ARREADY,
        ARADDR => s_axi_CTRL_ARADDR,
        RVALID => s_axi_CTRL_RVALID,
        RREADY => s_axi_CTRL_RREADY,
        RDATA => s_axi_CTRL_RDATA,
        RRESP => s_axi_CTRL_RRESP,
        BVALID => s_axi_CTRL_BVALID,
        BREADY => s_axi_CTRL_BREADY,
        BRESP => s_axi_CTRL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        height => height,
        width => width,
        bckgndId => bckgndId,
        ovrlayId => ovrlayId,
        maskId => maskId,
        motionSpeed => motionSpeed,
        colorFormat => colorFormat,
        crossHairX => crossHairX,
        crossHairY => crossHairY,
        ZplateHorContStart => ZplateHorContStart,
        ZplateHorContDelta => ZplateHorContDelta,
        ZplateVerContStart => ZplateVerContStart,
        ZplateVerContDelta => ZplateVerContDelta,
        boxSize => boxSize,
        boxColorR => boxColorR,
        boxColorG => boxColorG,
        boxColorB => boxColorB,
        dpDynamicRange => dpDynamicRange,
        dpYUVCoef => dpYUVCoef,
        field_id => field_id,
        bck_motion_en => bck_motion_en,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    tpgBackground_U0 : component dma_demo_v_tpg_0_2_tpgBackground
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tpgBackground_U0_ap_start,
        start_full_n => start_for_tpgForeground_U0_full_n,
        ap_done => tpgBackground_U0_ap_done,
        ap_continue => tpgBackground_U0_ap_continue,
        ap_idle => tpgBackground_U0_ap_idle,
        ap_ready => tpgBackground_U0_ap_ready,
        start_out => tpgBackground_U0_start_out,
        start_write => tpgBackground_U0_start_write,
        height => height,
        width => width,
        bck_motion_en => bck_motion_en,
        patternId => bckgndId,
        ZplateHorContStart => ZplateHorContStart,
        ZplateHorContDelta => ZplateHorContDelta,
        ZplateVerContStart => ZplateVerContStart,
        ZplateVerContDelta => ZplateVerContDelta,
        dpDynamicRange => dpDynamicRange,
        dpYUVCoef => dpYUVCoef,
        motionSpeed => motionSpeed,
        colorFormat => colorFormat,
        outImg_din => tpgBackground_U0_outImg_din,
        outImg_full_n => bckgndYUV_full_n,
        outImg_write => tpgBackground_U0_outImg_write);

    tpgForeground_U0 : component dma_demo_v_tpg_0_2_tpgForeground
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tpgForeground_U0_ap_start,
        start_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        ap_done => tpgForeground_U0_ap_done,
        ap_continue => tpgForeground_U0_ap_continue,
        ap_idle => tpgForeground_U0_ap_idle,
        ap_ready => tpgForeground_U0_ap_ready,
        start_out => tpgForeground_U0_start_out,
        start_write => tpgForeground_U0_start_write,
        srcImg_dout => bckgndYUV_dout,
        srcImg_empty_n => bckgndYUV_empty_n,
        srcImg_read => tpgForeground_U0_srcImg_read,
        height => height,
        width => width,
        patternId => ovrlayId,
        maskId => maskId,
        colorFormat => colorFormat,
        crossHairX => crossHairX,
        crossHairY => crossHairY,
        boxSize => boxSize,
        boxColorR => boxColorR,
        boxColorG => boxColorG,
        boxColorB => boxColorB,
        motionSpeed => motionSpeed,
        outImg_din => tpgForeground_U0_outImg_din,
        outImg_full_n => ovrlayYUV_full_n,
        outImg_write => tpgForeground_U0_outImg_write);

    MultiPixStream2AXIvideo_U0 : component dma_demo_v_tpg_0_2_MultiPixStream2AXIvideo
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => MultiPixStream2AXIvideo_U0_ap_start,
        ap_done => MultiPixStream2AXIvideo_U0_ap_done,
        ap_continue => MultiPixStream2AXIvideo_U0_ap_continue,
        ap_idle => MultiPixStream2AXIvideo_U0_ap_idle,
        ap_ready => MultiPixStream2AXIvideo_U0_ap_ready,
        ovrlayYUV_dout => ovrlayYUV_dout,
        ovrlayYUV_empty_n => ovrlayYUV_empty_n,
        ovrlayYUV_read => MultiPixStream2AXIvideo_U0_ovrlayYUV_read,
        height => height,
        width => width,
        colorFormat => colorFormat,
        fid_in => MultiPixStream2AXIvideo_U0_fid_in,
        fid => MultiPixStream2AXIvideo_U0_fid,
        fid_ap_vld => MultiPixStream2AXIvideo_U0_fid_ap_vld,
        field_id => field_id,
        m_axis_video_TDATA => MultiPixStream2AXIvideo_U0_m_axis_video_TDATA,
        m_axis_video_TVALID => MultiPixStream2AXIvideo_U0_m_axis_video_TVALID,
        m_axis_video_TREADY => m_axis_video_TREADY,
        m_axis_video_TKEEP => MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP,
        m_axis_video_TSTRB => MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB,
        m_axis_video_TUSER => MultiPixStream2AXIvideo_U0_m_axis_video_TUSER,
        m_axis_video_TLAST => MultiPixStream2AXIvideo_U0_m_axis_video_TLAST,
        m_axis_video_TID => MultiPixStream2AXIvideo_U0_m_axis_video_TID,
        m_axis_video_TDEST => MultiPixStream2AXIvideo_U0_m_axis_video_TDEST);

    bckgndYUV_U : component dma_demo_v_tpg_0_2_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tpgBackground_U0_outImg_din,
        if_full_n => bckgndYUV_full_n,
        if_write => tpgBackground_U0_outImg_write,
        if_dout => bckgndYUV_dout,
        if_empty_n => bckgndYUV_empty_n,
        if_read => tpgForeground_U0_srcImg_read);

    ovrlayYUV_U : component dma_demo_v_tpg_0_2_fifo_w24_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tpgForeground_U0_outImg_din,
        if_full_n => ovrlayYUV_full_n,
        if_write => tpgForeground_U0_outImg_write,
        if_dout => ovrlayYUV_dout,
        if_empty_n => ovrlayYUV_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ovrlayYUV_read);

    start_for_tpgForeground_U0_U : component dma_demo_v_tpg_0_2_start_for_tpgForeground_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tpgForeground_U0_din,
        if_full_n => start_for_tpgForeground_U0_full_n,
        if_write => tpgBackground_U0_start_write,
        if_dout => start_for_tpgForeground_U0_dout,
        if_empty_n => start_for_tpgForeground_U0_empty_n,
        if_read => tpgForeground_U0_ap_ready);

    start_for_MultiPixStream2AXIvideo_U0_U : component dma_demo_v_tpg_0_2_start_for_MultiPixStream2AXIvideo_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_MultiPixStream2AXIvideo_U0_din,
        if_full_n => start_for_MultiPixStream2AXIvideo_U0_full_n,
        if_write => tpgForeground_U0_start_write,
        if_dout => start_for_MultiPixStream2AXIvideo_U0_dout,
        if_empty_n => start_for_MultiPixStream2AXIvideo_U0_empty_n,
        if_read => MultiPixStream2AXIvideo_U0_ap_ready);




    MultiPixStream2AXIvideo_U0_ap_continue <= ap_const_logic_1;
    MultiPixStream2AXIvideo_U0_ap_start <= start_for_MultiPixStream2AXIvideo_U0_empty_n;
    MultiPixStream2AXIvideo_U0_fid_in <= (0=>fid_in, others=>'-');
    MultiPixStream2AXIvideo_U0_start_full_n <= ap_const_logic_1;
    MultiPixStream2AXIvideo_U0_start_write <= ap_const_logic_0;
    ap_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_idle <= (tpgForeground_U0_ap_idle and tpgBackground_U0_ap_idle and MultiPixStream2AXIvideo_U0_ap_idle);
    ap_ready <= tpgBackground_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= MultiPixStream2AXIvideo_U0_ap_done;
    ap_sync_ready <= tpgBackground_U0_ap_ready;
    fid <= MultiPixStream2AXIvideo_U0_fid(0);
    fid_ap_vld <= MultiPixStream2AXIvideo_U0_fid_ap_vld;
    m_axis_video_TDATA <= MultiPixStream2AXIvideo_U0_m_axis_video_TDATA;
    m_axis_video_TDEST <= MultiPixStream2AXIvideo_U0_m_axis_video_TDEST;
    m_axis_video_TID <= MultiPixStream2AXIvideo_U0_m_axis_video_TID;
    m_axis_video_TKEEP <= MultiPixStream2AXIvideo_U0_m_axis_video_TKEEP;
    m_axis_video_TLAST <= MultiPixStream2AXIvideo_U0_m_axis_video_TLAST;
    m_axis_video_TSTRB <= MultiPixStream2AXIvideo_U0_m_axis_video_TSTRB;
    m_axis_video_TUSER <= MultiPixStream2AXIvideo_U0_m_axis_video_TUSER;
    m_axis_video_TVALID <= MultiPixStream2AXIvideo_U0_m_axis_video_TVALID;
    start_for_MultiPixStream2AXIvideo_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tpgForeground_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tpgBackground_U0_ap_continue <= ap_const_logic_1;
    tpgBackground_U0_ap_start <= ap_start;
    tpgForeground_U0_ap_continue <= ap_const_logic_1;
    tpgForeground_U0_ap_start <= start_for_tpgForeground_U0_empty_n;
end behav;
